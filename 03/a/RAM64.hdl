// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // Put your code here:
    DMux8Way(in=load, sel[0]=address[3], sel[1]=address[4], sel[2]=address[5], a=R0, b=R1, c=R2, d=R3, e=R4, f=R5, g=R6, h=R7);
    RAM8(in=in, load=R0, address[0..2]=address[0..2], out=o0);
    RAM8(in=in, load=R1, address[0..2]=address[0..2], out=o1);
    RAM8(in=in, load=R2, address[0..2]=address[0..2], out=o2);
    RAM8(in=in, load=R3, address[0..2]=address[0..2], out=o3);
    RAM8(in=in, load=R4, address[0..2]=address[0..2], out=o4);
    RAM8(in=in, load=R5, address[0..2]=address[0..2], out=o5);
    RAM8(in=in, load=R6, address[0..2]=address[0..2], out=o6);
    RAM8(in=in, load=R7, address[0..2]=address[0..2], out=o7);
    Mux8Way16(a=o0, b=o1, c=o2, d=o3, e=o4, f=o5, g=o6, h=o7, sel[0..2]=address[3..5], out=out);
}
